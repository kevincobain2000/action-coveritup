---
import Sidebar from "@components/partials/readme_dashboard/sidebar.astro";
import Heading from "@components/partials/readme_dashboard/heading.astro";
import QuickDocs from "@components/partials/readme_dashboard/quick_docs.astro";
import Badges from "@components/partials/readme_dashboard/badges.astro";
import Progress from "@components/partials/readme_dashboard/progress.astro";
import MiniCharts from "@components/partials/readme_dashboard/mini_charts.astro";
import FullCharts from "@components/partials/readme_dashboard/full_charts.astro";
import TypesCharts from "@components/partials/readme_dashboard/types_charts.astro";
import BranchesCharts from "@components/partials/readme_dashboard/branches_charts.astro";
import UsersCharts from "@components/partials/readme_dashboard/users_charts.astro";
import Alpine from "@components/Alpine.astro";

const baseURL = import.meta.env.PUBLIC_BASE_URL;
---

<div class="lg:flex" id="data" data-base-url={baseURL}>
  <div
    class="select-none lg:w-1/6 bg-slate-800 p-4 mt-20 rounded-lg xl:sticky xl:top-5 xl:self-start"
  >
    <Heading />
    <hr class="w-24 h-0.5 mx-auto bg-gray-500 border-0 rounded my-10" />
    <Sidebar />
  </div>

  <div class="mx-auto lg:w-4/5">
    <QuickDocs />
    <Progress />
    <Badges />
    <MiniCharts />
    <FullCharts />
    <TypesCharts />
    <BranchesCharts />
    <UsersCharts />
  </div>
</div>

<Alpine />
<script is:inline>
  const updateBranch = () => {
    const url = new URL(window.location.href);
    url.searchParams.set("branch", branch);
    window.history.pushState({ path: url.toString() }, "", url.toString());
    window.location.reload();
  };
  const groupByMetric = (types) => {
    return types.reduce((acc, type) => {
      const metric = type.metric;
      if (!acc[metric]) {
        acc[metric] = [];
      }
      acc[metric].push(type);
      return acc;
    }, {});
  };

  const currentURL = window.location.origin;
  let baseURL =
    document.querySelector("[data-base-url]")?.getAttribute("data-base-url") ||
    currentURL;
  baseURL = baseURL.startsWith("http") ? baseURL : currentURL + baseURL;

  const urlParams = new URLSearchParams(window.location.search);
  const org = urlParams.get("org");
  const repo = urlParams.get("repo");
  let branch = urlParams.get("branch");
  document.getElementById("org-repo-name").innerText = `${org}/${repo}`;
  fetch(`${baseURL}/api/readme?org=${org}&repo=${repo}`)
    .then((response) => response.json())
    .then((data) => {
      if (!branch && data.branches.length > 0) {
        branch = data.branch = data.branches[0];
        updateBranch();
      }

      Object.assign(data, {
        groupedTypes: groupByMetric(data.types),
        url: baseURL.replace(/^https?:\/\//, ""),
        org,
        repo,
      });
      document
        .getElementById("data")
        .setAttribute("x-data", JSON.stringify(data));
      Alpine.start();
    });
</script>

<style></style>
