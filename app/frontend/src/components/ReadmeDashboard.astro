---
import Sidebar from "@components/partials/readme_dashboard/sidebar.astro";
import Heading from "@components/partials/readme_dashboard/heading.astro";
import QuickDocs from "@components/partials/readme_dashboard/quick_docs.astro";
import Badges from "@components/partials/readme_dashboard/badges.astro";
import MiniCharts from "@components/partials/readme_dashboard/mini_charts.astro";
import FullCharts from "@components/partials/readme_dashboard/full_charts.astro";
import TypesCharts from "@components/partials/readme_dashboard/types_charts.astro";
import BranchesCharts from "@components/partials/readme_dashboard/branches_charts.astro";
import UsersCharts from "@components/partials/readme_dashboard/users_charts.astro";
const baseURL = import.meta.env.PUBLIC_BASE_URL;
---

<div class="lg:flex" id="data" data-base-url={baseURL}>
  <div
    class="hidden select-none lg:block lg:w-1/6 bg-slate-800 p-4 mt-20 rounded-lg sticky top-5 self-start"
  >
    <Sidebar />
  </div>

  <div class="mx-auto lg:w-4/5">
    <Heading />

    <QuickDocs />
    <Badges />
    <MiniCharts />
    <FullCharts />
    <TypesCharts />
    <BranchesCharts />
    <UsersCharts />
  </div>
</div>

<script is:inline src="//unpkg.com/alpinejs"></script>
<script is:inline>
  const updateBranch = () => {
    const url = new URL(window.location.href);
    url.searchParams.set("branch", branch);
    window.history.pushState({ path: url.toString() }, "", url.toString());
    window.location.reload();
  };
  const groupByMetric = (types) => {
    return types.reduce((acc, type) => {
      const metric = type.metric;
      if (!acc[metric]) {
        acc[metric] = [];
      }
      acc[metric].push(type);
      return acc;
    }, {});
  };

  const currentURL = window.location.origin;

  let baseURL = document
    .querySelector("[data-base-url]")
    ?.getAttribute("data-base-url");

  if (!baseURL) {
    baseURL = currentURL;
  }
  if (!baseURL.startsWith("http")) {
    baseURL = currentURL + baseURL;
  }

  const urlParams = new URLSearchParams(window.location.search);
  const org = urlParams.get("org");
  const repo = urlParams.get("repo");
  let branch = urlParams.get("branch");
  document.getElementById("org-repo-name").innerText = `${org}/${repo}`;
  fetch(`${baseURL}/api/readme?org=${org}&repo=${repo}`)
    .then((response) => response.json())
    .then((data) => {
      if (!branch && data.branches.length > 0) {
        data.branch = data.branches[0];
        branch = data.branch;
        updateBranch();
      }

      data.groupedTypes = groupByMetric(data.types);
      data.url = baseURL.replace("https://", "").replace("http://", "");
      data.org = org;
      data.repo = repo;

      document
        .getElementById("data")
        .setAttribute("x-data", JSON.stringify(data));
      Alpine.start();
    });
</script>

<style></style>
