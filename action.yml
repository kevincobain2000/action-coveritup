name: "action-coveritup"
author: "kevincobain2000"
description: "All in one code coverage solution, build times and custom metrics, comment on pull requests"
branding:
  icon: 'activity'
  color: 'red'

inputs:
  pr_comment:
    description: "If true, then comment on the Pull Request"
    default: 'false'
  type:
    description: "Type of score"
  types:
    description: "Types to report on PR comment. If empty then it will report all types"
  diff_types:
    description: "Only types to report on PR comment after 1st comment. 1st comment will have all types"
  metric:
    description: "Metric of score"
  command:
    description: "Command that outputs int score or want to record the run time"
    default: ''
  record:
    description: "score or time. In case of score the results is used as it is"
    default: 'score'
  destroy:
    description: "Destroy all"
    default: 'false'
  token:
    description: "Github token"
    default: '${{ github.token }}'
  theme:
    description: "Theme of the comment"
    default: 'light'
runs:
  using: "composite"
  steps:

    ###              Start                ###
    ### PREPARE ENVIRONMENT and VARIABLES ###

    # Branch names for publication and pull requests comments
    - name: Get Source and Target Branch Names
      if: ${{github.event_name != 'pull_request'}}
      shell: bash
      run: |
        REF=${GITHUB_REF#refs/}
        if [[ "$REF" == heads/* ]]; then
          echo BRANCH_OR_TAG_NAME=${REF#heads/} >> $GITHUB_ENV
        elif [[ "$REF" == tags/* ]]; then
          echo BRANCH_OR_TAG_NAME=${REF#tags/} >> $GITHUB_ENV
        fi

    - name: Get Source and Target Branch Names
      shell: bash
      if: ${{github.event_name == 'pull_request'}}
      run: echo BRANCH_OR_TAG_NAME=${{ github.event.pull_request.head.ref }} >> $GITHUB_ENV

    # Commit Hash
    - name: Commit Hash
      shell: bash
      if: ${{github.event_name == 'pull_request'}}
      run: |
        echo COMMIT_HASH=${{ github.event.pull_request.head.sha }} >> $GITHUB_ENV
        echo

    - name: Commit Hash
      if: ${{github.event_name != 'pull_request'}}
      shell: bash
      run: echo COMMIT_HASH=${{ github.sha }} >> $GITHUB_ENV

    # All branch names for this repo seperated by spaces
    - name: Extract all active branches
      shell: bash
      if: ${{inputs.pr_comment != 'true' &&inputs.destroy != 'true'}}
      run: |
        git config remote.origin.prune true && git fetch
        echo ACTIVE_BRANCHES=`git branch -r | grep -v HEAD | sed 's/origin\///' | tr '\n' ' '` >> "$GITHUB_ENV"
    ###              End                  ###
    ### PREPARE ENVIRONMENT and VARIABLES ###

    ###              Start              ###
    ###         Execute Commands        ###
    - name: Set Score as it is
      if: ${{inputs.record == 'score'}}
      shell: bash
      run: |
        echo SCORE=`${{ inputs.command }}` >> "$GITHUB_ENV"

    - name: Set Score for runtime
      if: ${{inputs.record == 'runtime'}}
      shell: bash
      run: |
        START=$SECONDS
        eval ${{ inputs.command }}
        echo SCORE=$(($SECONDS-START)) >> "$GITHUB_ENV"
    ###              End                ###
    ###        Execute Commands         ###

    ###              Start              ###
    ###            PUBLISHING           ###
    # Will create a new type if not exists for metric.
    # If type exists, then it will use the existing metric and ignore the metric passed
    - name: Publish this output and update branches
      if: ${{inputs.pr_comment != 'true' && inputs.destroy != 'true'}}
      shell: bash
      run: |
        curl -Lk --fail \
          -X POST \
          -x "${{ env.COVERITUP_HTTP_PROXY }}" \
          -H 'Content-Type: application/json' \
          -H 'Authorization: ${{ inputs.token }}' \
          -d '{
            "org": "${{github.repository_owner}}",
            "commit": "${{ env.COMMIT_HASH }}",
            "repo": "${{ github.event.repository.name }}",
            "type": "${{ inputs.type }}",
            "metric": "${{ inputs.metric }}",
            "score": "${{ env.SCORE }}",
            "user": "${{ github.actor }}",
            "branch": "${{ env.BRANCH_OR_TAG_NAME }}",
            "pr_num": "${{ github.event.number }}",
            "branches": "${{ env.ACTIVE_BRANCHES }}"
          }' \
          "${{env.COVERITUP_HOST}}/upload"

    # Prepare comment on PR if it is a pull req
    - name: Prepare comment on PR if it is a pull req
      if: ${{inputs.pr_comment == 'true' && github.event_name == 'pull_request' && github.event.pull_request.base.ref != ''}}
      shell: bash
      run: |
        response=$(curl -Lk \
          -X GET \
          -x "${{ env.COVERITUP_HTTP_PROXY }}" \
          -H 'Content-Type: application/json' \
          -w "%{http_code}" \
          "${{env.COVERITUP_HOST}}/pr?org=${{github.repository_owner}}&repo=${{ github.event.repository.name }}&types=${{ inputs.types }}&diff_types=${{ inputs.diff_types }}&theme=${{ inputs.theme }}&pr_num=${{ github.event.number }}&branch=${{ env.BRANCH_OR_TAG_NAME }}&base_branch=${{ github.event.pull_request.base.ref }}" \
          -o comment_body.txt)
        echo "PR_HTTP_RESPONSE=$response" >> $GITHUB_ENV

    # Create or update comment
    # Won't work on forks https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#restrictions-on-repository-forks
    - name: Find Comment
      shell: bash
      if: ${{ github.event_name == 'pull_request' && success() && inputs.pr_comment == 'true' && env.PR_HTTP_RESPONSE == '201' && github.event.pull_request.head.repo.full_name == github.repository }}
      run: |
        cat comment_body.txt
        # Define API URL for PR comments
        PR_COMMENTS_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"

        # Fetch existing comments
        COMMENTS_JSON=$(curl -s -H "Authorization: Bearer ${{ inputs.token }}" -H "Accept: application/vnd.github+json" "$PR_COMMENTS_URL")

        if [ $? -ne 0 ] || [ -z "$COMMENTS_JSON" ] || [ "$COMMENTS_JSON" == "null" ]; then
          echo "::error title=GitHub API Error::Failed to fetch comments or received null response"
          exit 1
        fi

        echo "Fetched comments: $COMMENTS_JSON"

        # Find existing comment ID
        COMMENT_ID=$(echo "$COMMENTS_JSON" | jq -r --arg anchor "<!-- __COVERITUP_ANCHOR__ -->" '.[]? | select(.body? | contains($anchor)) | .id')

        if [ $? -ne 0 ] || [ -z "$COMMENT_ID" ] || [ "$COMMENT_ID" == "null" ]; then
          echo "No existing comment found, proceeding to create a new one."
          COMMENT_ID=""
        else
          echo "Found existing comment with ID: $COMMENT_ID"
        fi

        # Read the comment body from the file
        COMMENT_BODY=$(cat comment_body.txt)

        if [ -n "$COMMENT_ID" ]; then
          # Update existing comment
          PR_COMMENT_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/$COMMENT_ID"
          METHOD="PATCH"
        else
          # Create a new comment
          PR_COMMENT_URL="$PR_COMMENTS_URL"
          METHOD="POST"
        fi

        # Escape the comment body to handle special characters properly
        COMMENT_BODY_ESCAPED=$(jq -Rs . <<< "$COMMENT_BODY")

        # Send the request
        CURL_RESPONSE=$(curl -s -X "$METHOD" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          -H "Accept: application/vnd.github+json" \
          -H "Content-Type: application/json" \
          -d "{\"body\": $COMMENT_BODY_ESCAPED}" \
          "$PR_COMMENT_URL")

        if [ $? -ne 0 ] || [ -z "$CURL_RESPONSE" ] || [ "$CURL_RESPONSE" == "null" ]; then
          echo "::error title=Curl failed::Failed to manage comment"
          echo "Curl Response: $CURL_RESPONSE"
          exit 1
        fi

        echo "Successfully posted comment: $CURL_RESPONSE"

    ###               END                 ###
    ###            PUBLISHING             ###


    ###               Start               ###
    ###             Compliance            ###
    # Destroy everything or just by the type
    # if type is empty then it will destroy everything
    - name: Destroy everything that was ever published
      if: ${{inputs.destroy == 'true'}}
      shell: bash
      run: |
        curl -Lk --fail \
          -X POST \
          -x "${{ env.COVERITUP_HTTP_PROXY }}" \
          -H 'Content-Type: application/json' \
          -H 'Authorization: ${{ inputs.token }}' \
          -d '{
            "org": "${{github.repository_owner}}",
            "repo": "${{ github.event.repository.name }}",
            "type": "${{ inputs.type }}",
            "commit": "${{ env.COMMIT_HASH }}"
          }' \
          "${{env.COVERITUP_HOST}}/destroy"
    ###                End                ###
    ###             Compliance            ###
