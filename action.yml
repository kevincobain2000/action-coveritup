name: "action-coveritup"
author: "kevincobain2000"
description: "All in one code coverage solution, build times and custom metrics, comment on pull requests"
branding:
  icon: 'activity'
  color: 'red'

inputs:
  host:
    description: "URL where coveritup is running"
    default: 'https://coveritup.app'
  pr_comment:
    description: "If true, then comment on the Pull Request"
    default: 'false'
  type:
    description: "Type of score"
  metric:
    description: "Metric of score"
  destroy:
    description: "Destroy all"
    default: 'false'
runs:
  using: "composite"
  steps:

    ###              Start                ###
    ### PREPARE ENVIRONMENT and VARIABLES ###
    - uses: credfeto/action-repo-visibility@v1.2.0
      id: visibility

    - name: Do not allow private repos, unless explicitly specified
      shell: bash
      if: ${{ steps.visibility.outputs.is_private == 'true' }}
      run: |
        echo "Private repos are not supported"
        exit 1

    - name: Donot allow self-hosted, if user has forgotten to set the host
      shell: bash
      if: ${{github.api_url != 'https://api.github.com' && inputs.host == 'https://coveritup.app'}}
      run: |
        echo "You must set the host to your own coveritup instance"
        exit 1

    # Branch names for publication and pull requests comments
    - id: branch-name
      if: ${{inputs.destroy != 'true'}}
      uses: tj-actions/branch-names@v7

    # Find the pull request number
    # steps.branch-name.outputs.is_default == 'false' is to ensure that type is a pull request
    - id: find-pull-request
      if: ${{inputs.destroy != 'true' && steps.branch-name.outputs.is_default == 'false' }}
      uses: jwalton/gh-find-current-pr@v1
      with:
        state: open

    # All branch names for this repo seperated by spaces
    - name: Extract all active branches
      shell: bash
      if: ${{inputs.pr_comment != 'true' &&inputs.destroy != 'true'}}
      run: |
        git config remote.origin.prune true && git fetch
        echo CIU_ACTIVE_BRANCHES=`git branch -r | grep -v HEAD | sed 's/origin\///' | tr '\n' ' '` >> "$GITHUB_ENV"
    ###              End                ###
    ### PREPARE ENVIRONMENT and VARIABLES ###



    ###              Start                ###
    ###            PUBLISHING             ###
    # Will create a new type if not exists for metric.
    # If type exists, then it will use the existing metric and ignore the metric passed
    - name: Publish this output and update branches
      if: ${{inputs.pr_comment != 'true' && inputs.destroy != 'true'}}
      shell: bash
      run: |
        curl -sLk --fail \
          -X POST \
          -H 'Content-Type: application/json' \
          -H 'Authorization: ${{ github.token }}' \
          -d '{
            "org": "${{github.repository_owner}}",
            "commit": "${{ github.sha }}",
            "repo": "${{ github.event.repository.name }}",
            "type": "${{ inputs.type }}",
            "metric": "${{ inputs.metric }}",
            "score": "${{ env.SCORE }}",
            "user": "${{ github.actor }}",
            "branch": "${{ steps.branch-name.outputs.current_branch }}",
            "pr": "${{ steps.find-pull-request.outputs.number }}",
            "branches": "${{ env.CIU_ACTIVE_BRANCHES }}"
          }' \
          "${{inputs.host}}/upload"

    # Prepare comment on PR if it is a pull req
    - name: Prepare comment on PR if it is a pull req
      if: ${{inputs.pr_comment == 'true' && steps.branch-name.outputs.is_default == 'false' && steps.branch-name.outputs.base_ref_branch != ''}}
      shell: bash
      run: |
        response=$(curl -sLk \
          -X GET \
          -H 'Content-Type: application/json' \
          -w "%{http_code}" \
          "${{inputs.host}}/pr?org=${{github.repository_owner}}&repo=${{ github.event.repository.name }}&type=${{ inputs.type }}&branch=${{ steps.branch-name.outputs.current_branch }}&base_branch=${{ steps.branch-name.outputs.base_ref_branch }}" \
          -o comment_body.txt)
        echo "PR_HTTP_RESPONSE=$response" >> $GITHUB_ENV

    # Comment on PR if it is a pull req and the status code is 201
    - name: Comment on PR if it is a pull req
      if: ${{inputs.pr_comment == 'true' && steps.find-pull-request.outputs.number != '' && steps.branch-name.outputs.base_ref_branch != '' && env.PR_HTTP_RESPONSE == '201'}}
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ steps.find-pull-request.outputs.number }}
        body-path: comment_body.txt
    ###               END                 ###
    ###            PUBLISHING             ###


    ###               Start               ###
    ###             Compliance            ###
    # Destroy everything or just by the type
    # if type is empty then it will destroy everything
    - name: Destroy everything that was ever published
      if: ${{inputs.destroy == 'true'}}
      shell: bash
      run: |
        curl -sLk --fail \
          -X POST \
          -H 'Content-Type: application/json' \
          -H 'Authorization: ${{ github.token }}' \
          -d '{
            "org": "${{github.repository_owner}}",
            "repo": "${{ github.event.repository.name }}",
            "type": "${{ inputs.type }}",
            "commit": "${{ github.sha }}"
          }' \
          "${{inputs.host}}/destroy"
    ###                End                ###
    ###             Compliance            ###
